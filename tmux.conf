# Options
# set the default terminal
set-option -g default-terminal "screen-256color"
set-window-option -g xterm-keys on

# status line changes
set-option -g status-keys vi
set-option -g status-interval 1

set-option -g status-left ''
set-option -g status-left-length 0

set-option -g status-right '#[fg=brightgreen]['
set-option -ag status-right '#[fg=magenta]#{host_short}:'
set-option -ag status-right '#[fg=red]#{session_name} '
set-option -ag status-right '#[fg=cyan]%m/%d %H:%M'
set-option -ag status-right '#[fg=brightgreen]]#[default]'

set-option -g status-justify left
set-option -g status-style "fg=white,bold,bg=black"
set-window-option -g window-status-style "fg=colour252,bg=default"
set-window-option -g window-status-last-style "fg=colour220,bg=default"
set-window-option -g window-status-current-style "fg=black,bg=colour220"

set-option -g message-style "fg=black,bold,bg=colour166"
set-option -g message-command-style "fg=colour166,bg=black"

set -g pane-active-border-style 'fg=brightred'

# prefer screen prefix
unbind C-b
set-option -g prefix C-a

# extend repeat-time
set-option -g repeat-time 700

# vi keys in copy mode
set-window-option -g mode-keys vi

# Scroll History
set-option -g history-limit 30000

# display status line messages for 2secs
set-option -g display-time 2000

# Start window numbering at 1
set-option -g base-index 1

# set window title to current window name
set-option -g set-titles on
set-option -g set-titles-string '#{window_name}'

# Aggresive resize constrains only windows (not the entire session) to the
#   client with the smallest terminal-window size.
set-window-option -g aggressive-resize on

#Automatically renumber windows
set-option -g renumber-windows on

# Keybinding
# Last Window
unbind-key l
bind-key C-a last-window

# New Window
bind-key C-c new-window
bind-key C new-window -c '#{pane_current_path}'

# | = horizontal  split
unbind-key %
bind-key | split-window -h -c '#{pane_current_path}'

# - = vertical split
unbind-key '"'
bind-key - split-window -v -c '#{pane_current_path}'

# " = choose-window
bind-key '"' choose-window

# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind-key -n C-h if-shell "$is_vim" "send-keys C-h" "if -F '#{window_zoomed_flag}' 'selectp -L; resizep -Z' 'selectp -L'"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j" "if -F '#{window_zoomed_flag}' 'selectp -D; resizep -Z' 'selectp -D'"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k" "if -F '#{window_zoomed_flag}' 'selectp -U; resizep -Z' 'selectp -U'"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l" "if -F '#{window_zoomed_flag}' 'selectp -R; resizep -Z' 'selectp -R'"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "if -F '#{window_zoomed_flag}' 'selectp -l; resizep -Z' 'selectp -l'"

# reset pane and clear history
bind-key C-k if-shell "$is_vim" '' 'send-keys -R Escape C-l a; clear-history'

# r = respawn after exit or disconnect (zombie)
bind-key C-r respawn-window

# x kill window
unbind-key &
bind-key C-x confirm-before -p "kill-window #{window_name}? (y/n)" kill-window

# Send sequence to nested tmux session
bind-key -n c-s send-prefix

# Rebind rotate window as repeatable
bind-key -r C-o rotate-window

# quick access to man page without opening new split
bind-key / command-prompt -p "man" "split-window -h -l 100 'exec man %%'"

# source tmux config file
bind-key r source-file ~/.tmux.conf\; display-message "source-file done"

# highlight active pane for a half second
bind-key Enter run-shell 'tmux set-option window-active-style bg=colour160; sleep .5s ; tmux set-option window-active-style bg=default'

# Mac OS fix for pbcopy, pbpaste and launchctl
if-shell "uname | grep -q Darwin" "source-file .tmux.conf.macosx" "source-file .tmux.conf.linux"
